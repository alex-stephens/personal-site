"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.parse = exports.parseEntities = parseEntities;
exports.parseAsync = exports.parseEntitiesAsync = parseEntitiesAsync;
exports.parseEntity = parseEntity;

var _core = require("@citation-js/core");

var response = _interopRequireWildcard(require("./response.js"));

var _prop = require("./prop.js");

var _props = _interopRequireDefault(require("./props.json"));

var _ignoredProps = _interopRequireDefault(require("./ignoredProps.json"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function resolveProp(prop_, entity, unkown) {
  function resolve([prop, ...parts], {
    claims
  }) {
    if (!parts.length) {
      return claims[prop];
    } else if (claims[prop] && claims[prop].length) {
      return resolve(parts, claims[prop][0].value);
    }
  }

  const parts = prop_.split('.');
  unkown.delete(parts[0]);
  return resolve(parts, entity);
}

function prepareValue(statement, entity, unkown) {
  if (typeof statement !== 'object') {
    const value = resolveProp(statement, entity, unkown);
    return value && value[0].value;
  }

  const values = [].concat(...statement.props.map(prop => resolveProp(prop, entity, unkown)).filter(Boolean));

  if (statement.values === 'all') {
    return values[0] && values;
  } else {
    return values[0] && values[0].value;
  }
}

function parseEntity(entity) {
  const data = {
    id: entity.id,
    _wikiId: entity.id,
    source: 'Wikidata'
  };
  const unkown = new Set(Object.keys(entity.claims));

  for (const prop in _props.default) {
    const input = prepareValue(_props.default[prop], entity, unkown);

    if (input) {
      const output = (0, _prop.parseProp)(prop, input, entity);

      if (output) {
        data[prop] = output;
      }
    }
  }

  for (const prop of unkown) {
    if (prop in _ignoredProps.default) {
      continue;
    }

    _core.logger.unmapped('[plugin-wikidata]', 'property', prop);
  }

  if (!data.title) {
    data.title = (0, _prop.getLabel)(entity);
  }

  if (data['reviewed-title'] || data['reviewed-author']) {
    if (data.type.slice(0, 6) !== 'review') {
      data.type = 'review';
    }

    delete data.keyword;
  }

  if (data.recipient) {
    data.type = 'personal_communication';
  }

  if (data.event) {
    data.type = 'paper-conference';
  }

  return data;
}

async function parseEntitiesAsync({
  entities
}) {
  return (await response.parseAsync(entities)).map(parseEntity);
}

function parseEntities({
  entities
}) {
  return response.parse(entities).map(parseEntity);
}